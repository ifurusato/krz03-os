# Copyright 2020-2024 by Murray Altheim. All rights reserved. This file is part
# of the Robot Operating System project, released under the MIT License. Please
# see the LICENSE file included as part of this package.
#
# ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#       YAML configuration for M-Series Robot Operating System (MROS)
# ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

krzosd:
    application:                         'krzos'           # the application to start via daemon ('krzos')
    toggle_pin:                              10            # Rx=8, Tx=10; the GPIO pin connected to the 'enable' toggle switch

krzos:
    arguments:                                             # CLI arguments are copied here (required section)
        nada:                             False            # nada
    component:
        # publishers .......................................
        enable_queue_publisher:            True            # publishes from globally-available queue
        enable_distance_sensors:           True            # enable Distance Sensors
        enable_system_publisher:           True            # enable System Publisher
        enable_tinyfx_controller:          True            # enable Tiny FX for sounds and lighting fx
        enable_imu_publisher:             False            # enable IMU publisher
        enable_remote_ctrl_publisher:     False            # enable Remote Control Publisher
        enable_rtof_publisher:            False            # enable Ranging ToF publisher
        enable_gamepad_publisher:         False            # enable gamepad support
        enable_killswitch:                 True            # enable pushbutton kill switch
        # subscribers ......................................
        enable_distance_subscriber:        True            # enable Distance Sensors Subscriber
        enable_sound_subscriber:           True            # enable sounds for various events
        enable_macro_subscriber:          False            # enable macro publisher
    message_bus:
        max_age_ms:                        20.0            # maximum age of a message before expiry
        publish_delay_sec:                 0.05            # publishing delay loop
        clip_event_list:                  False            # if True clip length of displayed event list
        clip_length:                         42            # max length of displayed event list
    motor_controller:
        loop_freq_hz:                        20            # main loop delay in hz
        accel_decel_steps:                   50            # determines rate of acceleration/deceleration
        coasting_steps:                     300            # determines coasting deceleration
        braking_steps:                       60            # determines braking deceleration
        stopping_steps:                      10            # determines stopping deceleration
        pause:                                0.05         # delay on stepping
        speed_scale:                          5.4          # scaling to apply to the motor's speed to match its real-world speed
        enable_pid:                        True            # initial enable state for PID controller, otherwise direct drive
    motor:
        gear_ratio:                         250            # gear ratio of N20 motors
        motor_voltage:                       12            # the voltage rating of the motor
        enable_slew_limiter:              False            # initial enabled state for slew limiter (if disabled, no halt or brake)
        decoder:
            enable_odometry:               True            # if true we enable motor encoders and odometry
            use_pigpiod:                   True            # use pigpiod implementation  (1/3)
            use_gpiozero:                 False            # use gpiozero implementation (2/3)
            use_rpigpio:                  False            # use rpigpio implementation  (3/3)
            motor_encoder_pfwd_a:            16            # port fwd A channel
            motor_encoder_pfwd_b:            26            # port fwd B channel
            motor_encoder_sfwd_a:            21            # stbd fwd A channel
            motor_encoder_sfwd_b:            20            # stbd fwd B channel
            motor_encoder_paft_a:             5            # port aft A channel
            motor_encoder_paft_b:            12            # port aft B channel
            motor_encoder_saft_a:            13            # stbd aft A channel
            motor_encoder_saft_b:             6            # stbd aft B channel
        pid_controller:
            kp:                               0.23000      # proportional gain (Ku * 0.6)
            ki:                               0.03000      # integral gain     (Ku * 0.1)
            kd:                               0.01000      # derivative gain   (Ku * 0.05)
            minimum_output:                -100.0          # lower output limit
            maximum_output:                 100.0          # upper output limit
            sample_freq_hz:                  20            # 20Hz equiv to 50ms/0.05s
        slew_limiter:
            minimum_output:                  -1.0          # lower limit of permitted speed output values
            maximum_output:                   1.0          # upper limit, both should match motor_controller:scale_factor
            default_rate:                    100           # 100% of input
            braking_rate:                     80           # 80% of input (in loop) during braking
            hysteresis:                       2.0          # how close do we get to the target speed?
        speed:                                             # configured motor speeds for chadburn events
            astern:
                MAXIMUM:                   -100.0
                FULL:                       -80.0
                THREE_QUARTER:              -60.0
                TWO_THIRDS:                 -54.0
                HALF:                       -40.0
                SLOW:                       -33.0
                DEAD_SLOW:                  -22.0
                STOP:                         0.0
            ahead:
                STOP:                         0.0
                DEAD_SLOW:                   20.0
                SLOW:                        33.0
                HALF:                        40.0
                TWO_THIRDS:                  55.0
                THREE_QUARTER:               60.0
                FULL:                        80.0
                MAXIMUM:                    100.0
    publisher:
        system:
            publish_delay_sec:               30.0          # publishing delay loop
            current_threshold:                6.0          # alarm over current
            battery_threshold:               16.0          # alarm under voltage
            regulator_5v_threshold:           4.85         # alarm under voltage
            regulator_3v3_threshold:          3.2          # alarm under voltage
            temperature_threshold:           60.0          # alarm over temperature
        distance_sensors:
            loop_freq_hz:                    20            # main loop delay in hz
            sense_threshold:                150            # threshold in millimeters to react to an obstacle
            bump_threshold:                  70            # threshold in millimeters to consider as a bump
        imu:
            initial_calibration:          False            # if True, calibrate the IMU upon starting
            active_mode:                  False            # uses asyncio loop in active mode
            loop_freq_hz:                    20            # polling loop frequency (Hz)
            pitch_threshold:                 20.0          # pitch threshold for sending a message
            roll_threshold:                  20.0          # roll threshold for sending a message
        queue:
            loop_freq_hz:                    20            # polling loop frequency (Hz)
    hardware:
        button:                                            # GPIO or IO Expander-based simple button or switch
            i2c_address:                   0x18            # I2C address of the IO Expander (if used)
            impl:                        'gpio'            # either 'gpio', 'ioe', 'gpiozero' or 'pigpio'
            pin:                             17            # GPIO or IO Expander pin used
            led_pin:                         13            # GPIO pin for LED on wait()
        rtof:                                              # ranging time of flight sensor (VL53L5CX)
            enabled:                       True            # GPIO or IO Expander pin used
        killswitch:                                        # application kill switch
            pin:                             17            # GPIO or IO Expander pin used
        player:                                            # Tiny FX sound player
            verbose:                       True            # verbose messaging
        distance_sensor:
            pin_port:                        24            # the port input pin
            pin_cntr:                        25            # the center input pin
            pin_stbd:                         8            # the starboard input pin
            timeout:                          1            # time in seconds to consider sensor as timed out 
            smoothing:                     True            # enable smoothing of distance readings
            smoothing_window:                 5            # number of samples to use for smoothing
            loop_interval:                  0.1            # interval between distance polling, in seconds
        digital_potentiometer:                             # IO Expander-based RGB Potentiometer board
            i2c_address:                   0x0C            # I²C address for the device
            brightness:                     1.0            # brightness of the RGB LED (0.0-1.0)
            pin_red:                          1            # red pin
            pin_green:                        7            # green pin
            pin_blue:                         2            # blue pin
        icm20948:
            i2c_address:                   0x69            # I2C address (default 0x68)
            poll_rate_hz:                   150            # how often the IMU is polled
            vertical_mount:                True            # vertical like Pimoroni, or horizontal like Adafruit
            bench_calibrate:               True            # if true, calibrate the IMU manually while on the rotating bench
            motion_calibrate:             False            # if true, calibrate the IMU by the robot rotating in place
            show_console:                  True            # if true, show data on console (same as verbose)
            show_rgbmatrix5x5:             True            # if true, show heading as color
            show_rgbmatrix11x7:            True            # if true, show heading as number
            adjust_trim:                  False            # if true, use pot for trim, otherwise used fixed value
            pitch_trim:                    0.0             # pitch trim for level
            roll_trim:                     4.0             # roll trim for level
            heading_trim:                  1.55            # heading trim adjustment (in radians) to set north (was 0.15 on MR01)
            queue_length:                   100            # length of heading data queue
            stability_threshold:              5.0          # max standard deviation to determine stability
            cardinal_tolerance:               0.0698132    # tolerance to cardinal points (4° in radians)
#           cardinal_tolerance:               0.0523599    # tolerance to cardinal points (3° in radians)
            include_accel_gyro:            True            # if true, poll heading data
            include_heading:               True            # if true, poll accelerometer and gyroscope data
            play_sound:                    True            # if True, play sound to indicate calibration
        tinyfx-controller:
            i2c_address:                   0x45
            bus_number:                       1
            pin_1:                           14            # pin on the IO Expander (SCL blue)
            pin_2:                           12            # pin on the IO Expander (SDA yellow)
            enable_mast_light:             True            # flashing white mast light
            enable_nav_lights:             True            # port and starboard running lights
        paa5100je:                                         # PAA5100JE Optical Flow Sensor
            rotation:                       180            # permitted values: 0, 90, 180 or 270 
            x_trim:                         1.0            # percentage X trim (as a multiplier)
            y_trim:                         0.92           # percentage Y trim (as a multiplier)
        vl53l1cx:
            i2c_address:                   0x28            # I2C address (default 0x29)
            range:                            3            # range/distance mode: 1 = Short | 2 = Medium | or 3 = Long

#EOF
